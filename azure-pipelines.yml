pool:
  vmImage: 'vs2017-win2016'

trigger:
  branches:
    include: [ 'develop' ]
  
variables:
  buildConfiguration: 'Release'

# this translates into the $(Build.BuildNumber) variable.
name: $(Year:yy)$(DayOfYear)$(Rev:.r)

steps:
- script: echo '##vso[task.setvariable variable=Prerelease]true'
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
  displayName: 'Set Prerelease'

- script: |
    dotnet restore ./src/Cash.sln
    dotnet build ./src/Cash.sln --configuration $(buildConfiguration)
  displayName: 'Build'

- script: |
    mkdir $(Build.SourcesDirectory)\results

    dotnet test --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura  ./tests/Cash.Core.Tests/Cash.Core.Tests.csproj
    dotnet test --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:MergeWtih=$(Build.SourcesDirectory)/tests/Cash.Core.Tests/coverage.cobertura.xml ./tests/Cash.Autofac.Tests/Cash.Autofac.Tests.csproj

    copy $(Build.SourcesDirectory)/tests/Cash.Autofac.Tests/coverage.cobertura.xml $(Build.SourcesDirectory)\results
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path . --version 4.0.9
    .\reportgenerator "-reports:$(Build.SourcesDirectory)\results\coverage.cobertura.xml" "-targetdir:results" "-reporttypes:HtmlInline_AzurePipelines;HTMLChart"
  displayName: 'Testing'

- task: PublishTestResults@2
  displayName: 'Publish Test Report'
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Test Coverage'
  inputs:
    summaryFileLocation: $(Build.SourcesDirectory)\results\coverage.cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)\results
    codecoverageTool: cobertura

- task: DotNetCoreCLI@2
  inputs:
    command: pack
    projects: './src/Cash.sln'
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
  displayName: 'Publish'

- task: chrismason.vsts-docfxtasks.docfx-extension-build-task.DocFxTask@0
  displayName: 'Generate docs'
  inputs:
    solution: docs/docfx.json

- task: ArchiveFiles@2
  displayName: 'Package docs'
  inputs:
    rootFolderOrFile: 'docs\_site'
    archiveFile: '$(Build.ArtifactStagingDirectory)/docs-$(Build.BuildNumber).zip'

- task: PublishBuildArtifacts@1